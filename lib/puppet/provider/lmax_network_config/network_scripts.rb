Puppet::Type.type(:lmax_network_config).provide(:network_scripts) do
  desc "Provider for configuration of network_scripts"

  defaultfor :operatingsystem => [:redhat, :fedora, :centos]

  @@exclusive = nil
  @@configured_devices = []
  @@config_dir = "/etc/sysconfig/network-scripts/"
  @@instance_count = 0
  @@total_resource_count = 0

  # checks for network-script existence and correctness
  def exists?
    @@instance_count += 1
    @config_file = "#{@@config_dir}ifcfg-#{@resource[:name]}"

    # do not check file contents if the purpose is to ensure the file isn't there
    return File.exists?(@config_file) if @resource[:ensure] == :absent

    # load puppet configuration (`should`)
    @memory_values = {}

    # Get any property set in the resource that isn't a metaparameter
    mp = Puppet::Type::metaparams << :ensure << :provider << :exclusive
    @resource.to_hash.delete_if { |k,v| mp.include? k }.each_pair { |k, v|
      @memory_values[k.to_s.upcase.to_sym] = v.to_s unless v.nil?
      Puppet.debug("settings in memory: #{k.to_s.upcase.to_sym}=#{v.to_s}") unless v.nil?
    }

    # handle the special hack with :exclusive
    @@exclusive = @resource.to_hash[:exclusive] if @@exclusive.nil?

    # load on-disk configuration (`is`)
    @disk_values = load_disk_config()

    # if this is the last file to be checked, trigger exclusivity enforcement
    enforce_exclusivity if (@@instance_count == @@total_resource_count)

    return @disk_values == @memory_values
  end

  def create
    File.open(@config_file.to_s, 'w') do |f|
      f.write("# Generated by puppet-network on #{Time.now.strftime("%F %T")}\n")
      @memory_values.each_pair do |k, v|
        # only quote values that include space or equal characters
        quote_value = v.include?(' ') or v.include?('=')
        vs = v.nil? ? k : quote_value ? "#{k}=\"#{v}\"" : "#{k}=#{v}"
        f.write("#{vs}\n")
      end
    end
  end

  def destroy
    if File.exists?(@config_file)
      Puppet.notice "Destroying #{@config_file}"
      File.unlink(@config_file)
    end
  end

  # Reads the content in the config file and returns a hash of keys & values
  def load_disk_config
    return nil unless File.exists?(@config_file)

    config_hash = {}

    File.readlines(@config_file).each do |line|
      next unless line =~ /^\s*([A-Za-z][^=]+)="?([^"]+)"?$/
      config_hash[$1.strip.upcase.to_sym] = $2.chomp
      Puppet.debug("settings on disk: #{$1.strip.upcase.to_sym}=#{$2.chomp}")
    end

    Puppet.debug "Loaded file: #{@config_file}"
    return config_hash
  end

  #
  # `exclusive` related code
  #

  def initialize(args)
    super(args)
    @@configured_devices << "ifcfg-#{@resource[:device]}"
    @@total_resource_count += 1
  end

  def clear
    @@configured_devices = []
    @@instance_count = 0
    @@total_resource_count = 0
    @@exclusive = nil
  end

  # gets called once every network_config resource has been declared.
  def enforce_exclusivity
    unless @@exclusive == :false
      existing = Dir["#{@@config_dir}ifcfg-*"].map { |f| File.basename(f) }
      (existing - @@configured_devices).each do |parasite_file|
        Puppet.notice "puppet-network exclusive: removing #{parasite_file}"
        File.delete("#{@@config_dir}#{parasite_file}")
      end
    end
    clear()
  end
end
